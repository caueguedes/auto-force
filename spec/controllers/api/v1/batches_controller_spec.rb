require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::BatchesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Batch. As you add validations to Batch, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:batch).compact }

  let(:invalid_attributes) { { "purchase_channel": 'unknown' } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BatchesController. Be sure to keep this updated too.
  let(:valid_session) { }

  describe "POST #create" do
    let!(:orders) { create_list(:order, 2)}
    let!(:orders) { create_list(:order, 2, delivery_service: "FEDEX")}

    context "with enough orders" do
      it "creates a new Batch" do
        expect {
          post :create, params: valid_attributes, session: valid_session
        }.to change(Batch, :count).by(1)
      end

      it "renders a JSON response with the new batch" do
        post :create, params: valid_attributes, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context "without enough orders" do
      it "renders a JSON response with errors for the new batch" do
        post :create, params: {batch: invalid_attributes }, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe "PUT #produce" do
    context "in an existent batch" do
      let!(:batch) { create(:batch_with_orders) }

      it "updates the orders in batch to produce" do
        put :produce, params: {reference: batch.reference}, session: valid_session
        batch.reload
        expect( batch.orders.closing.count ).to eql(5)
      end

      it "renders a JSON response with the batch" do
        put :produce, params: {reference: batch.reference}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json; charset=utf-8')

        skip("check response")
      end
    end

    context "in an unexistent batch" do
      it "renders a JSON response with errors for the batch" do
        put :produce, params: {reference: 'unknown'}, session: valid_session
        expect(response).to have_http_status(404)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        print(response.body)
        skip("check response")
      end
    end
  end

  describe "PUT #close" do
    context "with enough closing orders" do
      let!(:batch) { create(:batch_with_orders, order_status: :closing) }

      context 'with valid params' do
        it "updates the requested batch" do
          put :close, params: {reference: batch.reference, delivery_service: "SEDEX"}, session: valid_session
          batch.reload
          expect(batch.orders.sent.count).to eql(2)
        end

        it "renders a JSON response with the batch" do
          put :close, params: {reference: batch.reference, delivery_service: "SEDEX"}, session: valid_session
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to eq('application/json; charset=utf-8')
          print("\n#{response.body}\n")
          skip("check response")
        end
      end
    end

    context "without enough closing orders" do
      let!(:batch) { create(:batch_with_orders, order_status: :production) }

      it "renders a JSON response with errors for the batch" do
        put :close, params: {reference: batch.reference, delivery_service: "SEDEX"}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        print(response.body)
        skip("check response")
      end
    end
  end
end
